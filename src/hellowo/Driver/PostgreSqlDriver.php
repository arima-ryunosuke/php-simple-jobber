<?php

namespace ryunosuke\hellowo\Driver;

use ErrorException;
use Exception;
use Generator;
use ryunosuke\hellowo\Exception\DriverException;
use ryunosuke\hellowo\Message;
use Throwable;

/**
 * architecture:
 * FOR UPDATE during job running.
 * SKIP LOCKED provides exclusive control of running jobs.
 * NOTIFY can be sent to waiting processes for immediate execution.
 */
class PostgreSqlDriver extends AbstractDriver
{
    public static function isEnabled(): bool
    {
        return extension_loaded('pgsql');
    }

    protected static function normalizeParams(array $params): array
    {
        $parts = explode('.', trim($params['path'] ?? '', '/'), 2);
        return [
            'database' => $parts[0] ?? null,
            'table'    => $parts[1] ?? null,
        ];
    }

    private array  $transport;
    private        $connection;
    private string $table;

    private ?float  $starttime;
    private float   $waittime;
    private string  $waitmode;
    private string  $deadmode;
    private ?string $sharedFile;

    private int   $heartbeat;
    private float $heartbeatTimer;

    private array $statements = [];

    public function __construct(array $options)
    {
        $options = self::normalizeOptions($options, [
            // pgsql instance or pgsql DSN
            'transport'  => [
                'host'     => '127.0.0.1',
                'port'     => 3306,
                'username' => null,
                'password' => null,
            ],
            // db and table
            'database'   => null,
            'table'      => 'hellowo',
            // null: wait waittime simply, int: wait until starttime+waittime
            'starttime'  => null,
            // one cycle wait time
            'waittime'   => 10.0,
            // sql: use SELECT SLEEP(), php: call usleep
            'waitmode'   => 'sql',
            // table: insert error table, column: update error column
            'deadmode'   => '',
            // sharing job filename
            'sharedFile' => null,
            // kills sleeping connections of different hosts for sudden death. requires PROCESS privileges
            'heartbeat'  => 0,
        ]);

        // connection
        if (is_array($options['transport'])) {
            $this->transport = array_filter([
                'host'     => $options['transport']['host'] ?? null,
                'port'     => $options['transport']['port'] ?? null,
                'user'     => $options['transport']['user'] ?? $options['transport']['username'] ?? null,
                'password' => $options['transport']['password'] ?? null,
                'dbname'   => $options['dbname'] ?? $options['database'] ?? null,
                //'application_name' => 'hellowo',
            ], fn($value) => $value !== '' && $value !== null);
            parent::__construct("postgresql {$this->transport['host']}/{$options['table']}");
        }
        else {
            $this->connection = $options['transport'];
            $hostport         = pg_host($this->connection) . ':' . pg_port($this->connection);
            parent::__construct("postgresql {$hostport}/{$options['table']}");
        }
        $this->table = $options['table'];

        $this->starttime  = $options['starttime'];
        $this->waittime   = $options['waittime'];
        $this->waitmode   = $options['waitmode'];
        $this->deadmode   = $options['deadmode'];
        $this->sharedFile = $options['sharedFile'];

        $this->heartbeat      = $options['heartbeat'];
        $this->heartbeatTimer = microtime(true) + $this->heartbeat;
    }

    protected function getConnection()
    {
        if (!isset($this->connection)) {
            $DSN = implode(' ', array_map(
                fn($value, string $key) => sprintf("%s='%s'", $key, addslashes($value)),
                array_values($this->transport),
                array_keys($this->transport),
            ));

            $this->connection = pg_connect($DSN, PGSQL_CONNECT_FORCE_NEW);
        }

        return $this->connection;
    }

    protected function setup(bool $forcibly = false): void
    {
        if ($forcibly) {
            $this->execute("DROP TABLE IF EXISTS {$this->table}");
            $this->execute("DROP TABLE IF EXISTS {$this->table}_dead");
        }

        // table
        $this->execute(<<<SQL
            CREATE TABLE IF NOT EXISTS {$this->table}(
                job_id    BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                job_data  JSON NOT NULL,
                priority  SMALLINT NOT NULL DEFAULT 0,
                start_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                error     TEXT DEFAULT NULL
            )
            SQL
        );
        if ($this->deadmode === 'table') {
            $this->execute(<<<SQL
                CREATE TABLE IF NOT EXISTS {$this->table}_dead(
                    job_id    BIGINT PRIMARY KEY,
                    job_data  JSON NOT NULL,
                    priority  SMALLINT NOT NULL DEFAULT 0,
                    start_at  TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
                    error     TEXT DEFAULT NULL
                )
                SQL
            );
        }

        if ($this->waitmode === 'sql') {
            pg_query($this->getConnection(), 'LISTEN hellowo_awake');
        }

        if ($this->sharedFile !== null) {
            @mkdir(dirname($this->sharedFile), 0755, true);
        }
    }

    protected function isStandby(): bool
    {
        try {
            // job_id is unsigned int
            $this->execute("DELETE FROM {$this->table} WHERE job_id = $1", [-1]);
            return false;
        }
        catch (Throwable $e) {
            set_error_handler(function ($severity, $message, $file, $line) {
                throw new ErrorException($message, 0, $severity, $file, $line);
            });
            try {
                if (in_array(pg_connection_status($this->getConnection()), [false, PGSQL_CONNECTION_BAD], true)) {
                    DriverException::throw($e->getMessage(), $e->getCode(), $e); // @codeCoverageIgnore
                }
            }
            finally {
                restore_error_handler();
            }

            return true;
        }
    }

    protected function select(): Generator
    {
        $jobs = $this->shareJob($this->sharedFile, $this->waittime, 256, fn() => array_column($this->execute("SELECT job_id, priority FROM {$this->table} WHERE start_at <= NOW() AND error IS NULL ORDER BY priority DESC LIMIT 256 FOR UPDATE SKIP LOCKED"), null, 'job_id'));

        foreach ($jobs as $job_id => $job) {
            $this->begin();
            try {
                $row = $this->execute("SELECT * FROM {$this->table} WHERE job_id = $1 FOR UPDATE SKIP LOCKED", [$job_id])[0] ?? null;

                if ($row === null) {
                    $this->unshareJob($this->sharedFile, $job_id);
                    $this->rollback();
                    continue;
                }

                $job    = $this->decode($row['job_data']);
                $result = yield new Message($job_id, pg_unescape_bytea($job['contents']), $job['retry'], $job['timeout']);
                if ($result === null) {
                    $this->execute("DELETE FROM {$this->table} WHERE job_id = $1", [$job_id]);
                }
                elseif (is_int($result) || is_float($result)) {
                    $job['retry']++;
                    $this->execute("UPDATE {$this->table} SET job_data = $1, start_at = NOW() + $2 WHERE job_id = $3", [$this->encode($job), "$result SECOND", $job_id]);
                }
                else {
                    if ($this->deadmode === 'table') {
                        $this->execute("INSERT INTO {$this->table}_dead SELECT job_id, job_data, priority, start_at, $1 FROM {$this->table} WHERE job_id = $2", ["$result", $job_id]);
                        $this->execute("DELETE FROM {$this->table} WHERE job_id = $1", [$job_id]);
                    }
                    elseif ($this->deadmode === 'column') {
                        $this->execute("UPDATE {$this->table} SET error = $1 WHERE job_id = $2", ["$result", $job_id]);
                    }
                }
                $this->unshareJob($this->sharedFile, $job_id);
                $this->commit();
                return;
            }
            catch (Throwable $ex) {
                $this->rollback();
                throw $ex;
            }
        }

        $this->sleep();
        $this->recover();
    }

    protected function error(Exception $e): bool
    {
        return $e instanceof DriverException;
    }

    protected function close(): void
    {
        if (isset($this->connection)) {
            @pg_close($this->connection);
            unset($this->connection);
        }

        gc_collect_cycles();
    }

    protected function send(string $contents, ?int $priority = null, $time = null, int $timeout = 0): ?string
    {
        $priority = $priority ?? 32767;
        $id       = $this->execute(
            "INSERT INTO {$this->table}(job_data, priority, start_at) VALUES ($1, $2, NOW() + $3) RETURNING job_id",
            [/* pg_escape_bytea is not necessary when binding */ $this->encode(['contents' => $contents, 'timeout' => $timeout]),
             $priority,
             "{$this->getDelay($time)} SECOND",
            ],
        )[0]['job_id'];

        return $id;
    }

    protected function notify(int $count = 1): int
    {
        if ($this->waitmode === 'sql') {
            return $this->execute("NOTIFY hellowo_awake");
        }
        elseif ($this->waitmode === 'php') {
            return count($this->notifyLocal($count));
        }
    }

    protected function cancel(?string $job_id = null, ?string $contents = null): int
    {
        $this->begin();
        try {
            // cannot cancel items already in progress
            $where  = 'FALSE';
            $params = [];
            if ($job_id !== null) {
                $where    .= ' OR job_id = $' . (count($params) + 1);
                $params[] = $job_id;
            }
            if ($contents !== null) {
                $where    .= " OR job_data->>'contents' = $" . (count($params) + 1);
                $params[] = $contents;
            }
            $job_ids = array_column($this->execute("SELECT job_id FROM {$this->table} WHERE error IS NULL AND ($where) FOR UPDATE SKIP LOCKED", $params, false), 'job_id');

            $count = 0;
            if ($job_ids) {
                $count = $this->execute("DELETE FROM {$this->table} WHERE job_id IN (" . implode(',', array_map(fn($n) => "\$$n", range(1, count($job_ids)))) . ")", $job_ids, false);
            }

            $this->commit();
            return $count;
        }
        catch (Throwable $ex) {
            $this->rollback();
            throw $ex;
        }
    }

    protected function clear(): int
    {
        return $this->execute("DELETE FROM {$this->table}");
    }

    protected function sleep(): void
    {
        if ($this->waitmode === 'sql') {
            $socket = pg_socket($this->getConnection());
            while (true) {
                $read  = [$socket];
                $write = $except = null;
                if (!@stream_select($read, $write, $except, 0, $this->waittime * 1000 * 1000)) {
                    break;
                }
                $notify = pg_get_notify($this->getConnection());
                if ($notify === false || $notify['message'] === 'hellowo_awake') {
                    break;
                }
            }
            fclose($socket);
        }
        elseif ($this->waitmode === 'php') {
            usleep(intval($this->waitTime($this->starttime, $this->waittime) * 1000 * 1000));
        }
    }

    protected function recover(): array
    {
        if (!$this->heartbeat) {
            return [];
        }

        if (microtime(true) < $this->heartbeatTimer) {
            return [];
        }
        $this->heartbeatTimer = microtime(true) + $this->heartbeat;

        $result = [];
        foreach ($this->processlist() as $process) {
            if ((time() - strtotime($process['state_change'])) >= $this->heartbeat) {
                if ($this->ping($process['client_addr'], 10) === false) {
                    $this->execute("SELECT pg_terminate_backend($1)", [$process['pid']]);
                    $result[$process['pid']] = $process;
                }
            }
        }
        return $result;
    }

    protected function processlist(): array
    {
        return $this->execute(
            "SELECT * FROM pg_stat_activity WHERE datname = CURRENT_DATABASE() AND pid <> pg_backend_pid() AND usename = CURRENT_USER",
        );
    }

    protected function execute(string $query, array $bind = [], bool $cachePrepare = true)
    {
        set_error_handler(fn() => DriverException::throw(@pg_last_error($this->getConnection())));

        try {
            $stmtname = $this->statements[$query] ??= (function () use ($query) {
                $stmtname  = 'hellowostmt' . count($this->statements);
                $statement = pg_prepare($this->getConnection(), $stmtname, $query);
                assert(is_object($statement) || is_resource($statement));
                return $stmtname;
            })();

            $result = pg_execute($this->getConnection(), $stmtname, $bind);
            try {
                if (pg_num_fields($result)) {
                    return pg_fetch_all($result, PGSQL_ASSOC) ?: []; // under php8.1 empty set returns false
                }
                return pg_affected_rows($result);
            }
            finally {
                pg_free_result($result);

                if (!$cachePrepare) {
                    pg_query($this->getConnection(), "DEALLOCATE $stmtname");
                    unset($this->statements[$query]);
                }
            }
        }
        finally {
            restore_error_handler();
        }
    }

    protected function query(string $query)
    {
        return pg_query($this->getConnection(), $query);
    }

    protected function begin()
    {
        $this->execute('BEGIN');
    }

    protected function commit()
    {
        $this->execute('COMMIT');
    }

    protected function rollback()
    {
        $this->execute('ROLLBACK');
    }
}
